/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2023-08-08 11:34:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSP;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.database.*;

public final class jobs_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.database");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Jobs List</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../CSS/jobs.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

	HttpSession s = request.getSession(false);
	if (s != null && Boolean.TRUE.equals(s.getAttribute("isAdmin"))) {
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "adminNav.jsp", out, false);
      out.write('\r');
      out.write('\n');
      out.write('	');

	} else if (s != null && Boolean.FALSE.equals(s.getAttribute("isAdmin"))) {
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "nav.jsp", out, false);
      out.write('\r');
      out.write('\n');
      out.write('	');

	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');

	Connection conn = dbconn.getConnection();
	Statement stmt = conn.createStatement(); String query1 = "SELECT * FROM order_list ";
    ResultSet rs1 = stmt.executeQuery(query1);
    
    while (rs1.next()) {
        if ("available".equals(rs1.getString("status"))) {
                                       // Calculate priority for the current job
            String startTime1 = rs1.getString("start_time");
            String estimatedCompleted1 = rs1.getString("estimated_completed");
            String estimatedCost1 = rs1.getString("estimated_cost");
            String concatenatedJobs1 = rs1.getString("repairs");

            priority order = new priority(startTime1, estimatedCompleted1, estimatedCost1, concatenatedJobs1);
            int priorit = order.calculate_priority();

            // Update the priority in the database
            int orderId = rs1.getInt("order_id");
            String updatePriorityQuery = "UPDATE order_list SET priority = " + priorit + " WHERE order_id = " + orderId;
            stmt.executeUpdate(updatePriorityQuery);
        }
    }

	// Retrieve users with is_admin = 2
	String query = "SELECT * FROM order_list ORDER BY priority DESC";
	ResultSet rs = stmt.executeQuery(query);
	
      out.write("\r\n");
      out.write("	<div style=\"display: grid; place-items: center\">\r\n");
      out.write("		<div class=\"content\" style=\"margin-top: 20px;\">\r\n");
      out.write("			<h2>Jobs:</h2>\r\n");
      out.write("\r\n");
      out.write("			<div class=\"scrollable-table\">\r\n");
      out.write("				<table>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>S.N.</th>\r\n");
      out.write("						<th>Customer Name</th>\r\n");
      out.write("						<th>Vehicle number</th>\r\n");
      out.write("						<th>Repairs</th>\r\n");
      out.write("						<th>Priority</th>\r\n");
      out.write("						<th>Actions</th>\r\n");
      out.write("					</tr>\r\n");
      out.write("					");

					int serialNumber = 1; // Counter variable for serial numbering
					while (rs.next()) {
						if ("available".equals(rs.getString("status"))) {
							String repairs = rs.getString("repairs");
							String[] repairsArray = repairs.split(". "); // Split the concatenated repairs into an array
						
      out.write("\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>");
      out.print( serialNumber );
      out.write("</td> <!-- Display serial number -->\r\n");
      out.write("							<td>");
      out.print(rs.getString("customer_name"));
      out.write("</td>\r\n");
      out.write("							<td>");
      out.print(rs.getString("vehicle_no"));
      out.write("</td>\r\n");
      out.write("							<td>\r\n");
      out.write("								");

								for (String repair : repairsArray) {
								
      out.write(' ');
      out.print(repair);
      out.write("<br> <!-- Display each repair on a new line -->\r\n");
      out.write("								");

								}
								
      out.write("\r\n");
      out.write("							</td>\r\n");
      out.write("							<td>");
      out.print(rs.getString("priority"));
      out.write("</td>\r\n");
      out.write("							<td><a href=\"repair.jsp?id=");
      out.print(rs.getInt("order_id"));
      out.write("\"><button>Take\r\n");
      out.write("										job</button></a>\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						");

						serialNumber++; // Increment the serial number
						}
					}
					
      out.write("\r\n");
      out.write("				</table>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("	<!-- This closed the connection preventing the reload -->\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
