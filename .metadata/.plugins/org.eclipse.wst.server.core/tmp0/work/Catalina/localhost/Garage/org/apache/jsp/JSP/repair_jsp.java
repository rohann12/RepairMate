/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2023-08-07 17:59:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSP;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.database.*;
import java.sql.*;

public final class repair_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.database");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Repair</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("    font-family: Arial, sans-serif;\r\n");
      out.write("    background-color: #f2f2f2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    max-width: 600px;\r\n");
      out.write("    margin: 60px auto 0; /* Adjust the top margin to make space for the navigation bar */\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    background-color: #fff;\r\n");
      out.write("    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table {\r\n");
      out.write("    border-collapse: collapse;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th, td {\r\n");
      out.write("    padding: 8px;\r\n");
      out.write("    text-align: left;\r\n");
      out.write("    border-bottom: 1px solid #ddd;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("    background-color: #f2f2f2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"checkbox\"] {\r\n");
      out.write("    margin-right: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Apple website inspired effects */\r\n");
      out.write(".content {\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    max-height: 0;\r\n");
      out.write("    transition: max-height 0.3s ease-out;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container.expanded .content {\r\n");
      out.write("    max-height: 1000px;\r\n");
      out.write("    transition: max-height 0.3s ease-in;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".time-taken {\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    top: 100px; /* Adjust the top position to make space for the navigation bar */\r\n");
      out.write("    right: 20px;\r\n");
      out.write("    z-index: 1; /* Set a higher z-index to make it appear above the content but below the navigation bar */\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    background-color: #fff;\r\n");
      out.write("    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("    animation: slide-in 0.5s ease-out;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("@keyframes slide-in {\r\n");
      out.write("    from {\r\n");
      out.write("        transform: translateX(100%);\r\n");
      out.write("    }\r\n");
      out.write("    to {\r\n");
      out.write("        transform: translateX(0);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"margin:0px;\">\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "nav.jsp", out, false);
      out.write('\r');
      out.write('\n');

    int id = Integer.parseInt(request.getParameter("id"));
    Connection conn = dbconn.getConnection();
    Statement stmt = conn.createStatement();
    //Sets the order status as ongoing
    String updateQuery = "UPDATE order_list SET status = 'ongoing' WHERE order_id = " + id;
    stmt.executeUpdate(updateQuery);
    
    String query = "SELECT * FROM order_list WHERE order_id=" + id;
    ResultSet rs = stmt.executeQuery(query);

      out.write('\r');
      out.write('\n');

    while (rs.next()) {
        String repairs = rs.getString("repairs");
        String[] repairsArray = repairs.split("\\. "); // Split repairs into an array

        // Helper function to check if all repairs are completed
        boolean allRepairsCompleted = true;
        for (String repair : repairsArray) {
            if (!repair.endsWith("(Completed)")) {
                allRepairsCompleted = false;
                break;
            }
        }

      out.write("\r\n");
      out.write("<div class=\"time-taken\">\r\n");
      out.write("    <strong>Time taken:</strong> <br><br> <span id=\"time_taken\">00:00:00</span>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <table>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Customer Name</th>\r\n");
      out.write("            <td>");
      out.print(rs.getString("customer_name"));
      out.write("</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Vehicle Number</th>\r\n");
      out.write("            <td>");
      out.print(rs.getString("vehicle_no"));
      out.write("</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Start Time</th>\r\n");
      out.write("            <td>");
      out.print(rs.getString("start_time"));
      out.write("</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Estimated Cost</th>\r\n");
      out.write("            <td>");
      out.print(rs.getString("estimated_cost"));
      out.write("</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Repairs</th>\r\n");
      out.write("            <td>\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("                ");
 for (String repair : repairsArray) { 
      out.write("\r\n");
      out.write("                    <label>\r\n");
      out.write("                        <input type=\"checkbox\" name=\"repairCheckbox\" value=\"");
      out.print( repair );
      out.write("\" disabled> ");
      out.print( repair );
      out.write("<br>\r\n");
      out.write("                    </label>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td colspan=\"2\">\r\n");
      out.write("                <button id=\"start_btn\" onclick=\"startStopwatch()\">Start</button>\r\n");
      out.write("                <button id=\"stop_btn\" onclick=\"stopStopwatch()\" disabled>Stop</button>\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("                ");
 if (!allRepairsCompleted) { 
      out.write("\r\n");
      out.write("                    <button id=\"complete_btn\" onclick=\"complete()\" disabled>Complete</button>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    var startTime = 0;\r\n");
      out.write("    var elapsedTime = 0;\r\n");
      out.write("    var stopwatchInterval;\r\n");
      out.write("    var startBtn = document.getElementById(\"start_btn\");\r\n");
      out.write("    var stopBtn = document.getElementById(\"stop_btn\");\r\n");
      out.write("    var completeBtn = document.getElementById(\"complete_btn\");\r\n");
      out.write("    var repairCheckboxes = document.getElementsByName(\"repairCheckbox\");\r\n");
      out.write("    var timeTakenElement = document.getElementById(\"time_taken\");\r\n");
      out.write("\r\n");
      out.write("    function startStopwatch() {\r\n");
      out.write("        startTime = new Date().getTime();\r\n");
      out.write("        startBtn.disabled = true;\r\n");
      out.write("        stopBtn.disabled = false;\r\n");
      out.write("        completeBtn.disabled = true;\r\n");
      out.write("        enableCheckboxes(true);\r\n");
      out.write("        stopwatchInterval = setInterval(updateElapsedTime, 1000);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function stopStopwatch() {\r\n");
      out.write("        clearInterval(stopwatchInterval);\r\n");
      out.write("        startBtn.disabled = false;\r\n");
      out.write("        stopBtn.disabled = true;\r\n");
      out.write("        enableCheckboxes(false);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function enableCheckboxes(enabled) {\r\n");
      out.write("        for (var i = 0; i < repairCheckboxes.length; i++) {\r\n");
      out.write("            repairCheckboxes[i].disabled = !enabled;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function updateElapsedTime() {\r\n");
      out.write("        var currentTime = new Date().getTime();\r\n");
      out.write("        elapsedTime += currentTime - startTime;\r\n");
      out.write("        startTime = currentTime;\r\n");
      out.write("\r\n");
      out.write("        var hours = Math.floor(elapsedTime / (1000 * 60 * 60));\r\n");
      out.write("        var minutes = Math.floor((elapsedTime % (1000 * 60 * 60)) / (1000 * 60));\r\n");
      out.write("        var seconds = Math.floor((elapsedTime % (1000 * 60)) / 1000);\r\n");
      out.write("\r\n");
      out.write("        var timeString = formatTime(hours) + \":\" + formatTime(minutes) + \":\" + formatTime(seconds);\r\n");
      out.write("        time_taken.innerText = timeString;\r\n");
      out.write("        checkCompleteButton();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function formatTime(time) {\r\n");
      out.write("        return time < 10 ? \"0\" + time : time;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Function to check if all repair checkboxes are checked and enable the \"Complete\" button\r\n");
      out.write("    function checkCompleteButton() {\r\n");
      out.write("        var allChecked = true;\r\n");
      out.write("        for (var i = 0; i < repairCheckboxes.length; i++) {\r\n");
      out.write("            if (!repairCheckboxes[i].checked) {\r\n");
      out.write("                allChecked = false;\r\n");
      out.write("                break;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        completeBtn.disabled = !allChecked;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Add an event listener to each repair checkbox to call the checkCompleteButton function\r\n");
      out.write("    for (var i = 0; i < repairCheckboxes.length; i++) {\r\n");
      out.write("        repairCheckboxes[i].addEventListener(\"change\", checkCompleteButton);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function complete() {\r\n");
      out.write("        var timeTaken = time_taken.innerText;\r\n");
      out.write("        var id = ");
      out.print( id );
      out.write("; // Get the 'id' value from JSP\r\n");
      out.write("        var url = \"complete.jsp?id=\" + id + \"&timeTaken=\" + encodeURIComponent(timeTaken);\r\n");
      out.write("        window.location.href = url;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");

    }

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
